Comando para escolher a PASTA a partir da qual o servidor PHP vai se iniciar:
    php -S localhost:8080 -t public

O parâmetro -S (maiúsculo) abre o servidor web do PHP. 
O parâmetro -t (minúsculo) definte o caminho target para os arquivos do PHP.

O projeto inicial no composer.json não continha as seguintes dependências, as 
quais foram necessárias para rodar o projeto baixado: 
    symfony/cache
    doctrine/annotations

*** Ponto único de entrada ***
Por padrão, se um caminho sem extensão for procurado no navegador, o servidor 
PHP retorna o arquivo index.php (ou qualquer arquivo definido como padrão pelo 
servidor web). Se você solicitar um arquivo com a extensão .php, o servidor 
retorna o arquivo .php ou a mensagem de erro caso não encontre o arquivo.

O benefício de o servidor buscar o index a partir de uma URI indisponível é
que esse índice pode buscar páginas a partir dessa URI. Com um ponto único de 
entrada, podemos filtrar todas as requisições e até realizar logs se quisermos.

A variável global $_SERVER é um array que contém o caminho da URI solicitada.
No PHP 7 o nome da variável que contém a URI é 'PATH_INFO'.
No PHP 8 o nome da variável que contém a URI é 'REQUEST_URI'.

A ideia é que as URI referenciem um controlador, e ele será responsável por
escolher o que será exibido como resultado. A ideia agora é criar nas classes
controladoras um método que processa a requisição e que retorna o HTML.

O MVC apresentado no curso tem alguns acréscimos antes de acessar o controller:
    Browser: que solicita recursos ao web server.
    Web Server: quem responde ao browser, após os retornos dos controllers.
    Routes: mapeia uma URI a um controlador.
    Dispatcher: redireciona as requisições aos controllers, usando routes.

O PHP tem três variáveis globais que podem ser usadas para guardar os dados
das requisições HTTP: $_GET, $_POST ou $_REQUEST (que busca os dados, 
independente de o método ser GET ou POST).

A função filter_input serve para filtrar dados da requisição. Os parâmetros são:
    1)  Tipo: no caso, vai filtrar de INPUT_POST;
    2)  Nome da variável: no exemplo, 'descricao';
    3)  Filtro: no caso, FILTER_SANITIZE_STRING (que está deprecado no PHP 8).
        Há outros filtros (FILTER_VALIDATE_INT).

Para remover HTML, recomenda-se substituir a função filter_input pela função 
htmlspecialchars, pois o filtro FILTER_SANITIZE_STRING está deprecado no PHP 8.

A função filter_var é semelhante à filter_input, mas é usada para variáveis ao
invés de requisições GET ou POST.

O código PHP pode adicionar cabeçalhos à resposta HTTP. É útil para 
redirecionar requisições, por exemplo. A sintaxe no PHP é: 
    header($string); 
    Ex.: header('Location: /listar-cursos');// Já basta pra redirecionar.

A sintaxe completa da função header seria:
    header($string, $replace, $http_response_code);

    Onde:
        $string = Conteúdo do cabeçalho.
        $replace = Se verdadeiro, substitui o cabeçalho original.
        $http_response_code = código HTTP usado na resposta.

Nota: ao redirecionar a requisição, a resposta da página atual não é exibida.

*******************************************************************************
Sim, um arquivo PHP isolado pode ter retorno! Ver o config/routes.php.
Daí, o "require 'config/routes.php" pode ser usado para setar uma variável:

    $rotas = require __DIR__ . '/../config/routes.php';

Sim, você pode instanciar uma classe a partir de uma variável! Se o conteúdo da
variável for uma classe, basta substituir o nome da classe pela variável:
    
    $controlador = new $classeControladora();

*******************************************************************************

A função http_response_code modifica o código HTTP da resposta.

Offtopic: algumas classes Bootstrap para aplicar flexbox. Pesquise as outras: 
    d-flex justify-content-between

Outro offtopic: o Doctrine pode precisar de seus proxies (no caso da exclusão
do curso, precisamos de um proxy para fazer a exclusão). Para isso, use o 
seguinte comando do doctrine:
    php .\vendor\bin\doctrine orm:generate-proxies

O PHP dispõe do chamado Output Buffer: ele guarda informações que normalmente
ficariam na saída padrão, para uso posterior. Métodos do Output Buffer:
    ob_start();     // Inicia o Output Buffer
    ob_get();       // Retorna o conteúdo do Output Buffer, sem limpa-lo.
    ob_clean();     // Limpa o conteúdo do Output Buffer.
    ob_get_clean(); // O mesmo que ob_get() e ob_clean() juntos.

Funções de senha no PHP:
    md5('senha') => retorna uma string com um hash MD5. É fácil decriptografar.
    hash('método', 'senha) => retorna  uma string, um hash gerado a partir do 
        método escolhido.
    password_hash(string $senha, int $algoritmo, array $options) => idem função
        hash, mas que contém mais opções.

Para a senha 123456, o hash usando Argon2I é:
    php > echo password_hash('123456', PASSWORD_ARGON2I);
    $argon2i$v=19$m=65536,t=4,p=1$c2JsT2JxT1drck1hL3F1Nw$G1uvII9sLPXn/ZJhMcP8SwSbKqpmO/sakWgAdWqcEJE

Comando SQL para inserção do usuário no database:
    Cuidado: Todas as partes com $ estão sendo parseadas como se fossem variáveis. 
        Como não existem, essa parte tá ficando simplesmente vazia.
        Coloque contra-barra antes de cada $ na hora de inserir.
    php .\vendor\bin\doctrine dbal:run-sql "INSERT INTO usuarios (email, senha) VALUES ('vinicius@alura.com.br', '\$argon2i\$v=19\$m=65536,t=4,p=1\$c2JsT2JxT1drck1hL3F1Nw\$G1uvII9sLPXn/ZJhMcP8SwSbKqpmO/sakWgAdWqcEJE');"
        AINDA ASSIM, O DOCTRINE NÃO INSERE O HASH DE MANEIRA FIEL.
        A SOLUÇÃO FOI EDITAR O DBSQLITE DIRETO.

A função password_verify testa se uma senha é igual a um hash. Ela já está
no método senhaEstaCorreta da classe Usuario.

No PHP é necessário declarar que a sessão está sendo iniciada antes de salvar
qualquer informação na sessão. Para isso, usamos a função session_start().

Como há um ponto único de entrada no nosso código, a session_start só precisa
ser chamada uma vez nesse ponto único. Antes de qualquer saída para o navegador
é necessário abrir uma sessão com session_start.

A função session_start envia um cookie (PHPSESSID) a partir do qual as 
informações de sessão são salvas/recuperadas.

$ehRotaDeLogin === false não é o mesmo que !ehRotaDeLogin.
Ao usar a funsção stripos, a string pode retornar zero se a palavra procurada
estiver no início na string onde se faz a a busca. Por isso, a sintaxe dos 3 
iguais é melhor.

Desde a versão 8.0 do PHP nós temos uma função mais amigável para verificar se
determinada string existe em outra. Ou seja, para verificar se a string "login"
existe em nossa URL nós podemos utilizar essa outra função. O nome dela é 
str_contains. Então o código ficaria:
    $ehRotaDeLogin = str_contains($caminho, 'login');

Essa função retorna um booleano (verdadeiro ou falso) e não um inteiro. Sendo 
assim, não temos aquele problema de verificar somente !$ehRotaDeLogin.

Uma forma de forçar o logout é:
    1) no browser, procure pela aba Application na Developer Tools.
    2) Procure, na seção Storage, o nó Cookies.
    3) A partir da URL onde está a aplicação, delete os cookies de sessão.

O padrão de exibir alertas na página (ou não) se chama Flash Messages. Vários
frameworks (como o Django pra Python) implementam esse padrão.
